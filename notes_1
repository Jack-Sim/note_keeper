#!/usr/bin/env python3

PYTHON = '.py'
MARKDOWN = '.md'
JAVASCRIPT = '.js'
JAVA = '.java'
HTML = '.html'
TEXT = '.txt'

fileExtMapping = {
        'py': PYTHON, '.py': PYTHON,
        'python': PYTHON, '.python': PYTHON,
        'md': MARKDOWN, '.md': MARKDOWN,
        'markdown': MARKDOWN, '.markdown': MARKDOWN,
        'js': JAVASCRIPT, '.js': JAVASCRIPT,
        'javascript': JAVASCRIPT, '.javascript': JAVASCRIPT,
        'java': JAVA, '.java': JAVA,
        'html': HTML, '.html': HTML,
        'txt': TEXT, '.txt': TEXT, 'text': TEXT, '.text': TEXT
        }

def setup_wd():
    try:
        return os.path.expanduser('~/Desktop/Notes')
    except:
        start_dir = os.path.expanduser('~/Desktop')
        os.makedirs(start_dir + '/Notes')
        return os.path.expanduser('~/Desktop/Notes')


def simpleNote(name, ext='md'):
    notesDir = setup_wd()
    ext = fileWithExtension(ext)
    if ext is None:
        print('[-] Invalid file extension')
        return
    name = name + ext
    filePath, searchedNotes = findFile(name, notesDir)
    if filePath:
        print('[+] The notes already exist, opening ' + name)
        os.system('vim ' + filePath)
    else:
        try:
            os.chdir(notesDir + '/General_Notes')
        except:
            os.makedirs(notesDir + '/General_Notes')
            os.chdir(notesDir + '/General_Notes')
        fileNew = open(name, 'w')
        fileNew.close()
        print('[+] New notes file: ' + name + ' created')
        os.system('vim ' + name)


def findFile(name, startDir):
    foundPaths = {startDir: {}}
    found = False
    try:
        toEval = os.listdir(startDir)
    except:
        if name in startDir:
            found = startDir
            return found, startDir
        else:
            return False, None

    while len(toEval) > 0 and not found:
        newDir = startDir + '/' + toEval[0]
        toEval.pop(0)
        found, foundPaths[startDir][newDir] = findFile(name, newDir)
    if found:
        print('[+] ' + name + ' exists, returning path to file')
        foundPaths = newDir
        return found, newDir
    return found, foundPaths


def fileWithExtension(ext):
    ext = ext.lower()
    if ext not in fileExtMapping.keys():
        print('[-] invalid file type')
        return
    else:
        return fileExtMapping[ext]


def folderNotes(name, folder, ext):
    ext = fileWithExtension(ext)
    if ext is None:
        print('[-] Invalid file extension')
        return
    fileName = name + ext
    notesDir = setup_wd()
    findFolder(folder, notesDir)
    filePath, searchedIndexes = findFile(fileName, os.getcwd())
    if filePath:
        print(f'[+] File {fileName} exists, opening file')
        os.system('vim ' + filePath)
    else:
        print(f'[+] File does not exist, \n'
              f'creating {fileName} in {os.getcwd()}')
        os.system('vim ' + fileName)


def findFolder(folderName, startDir):
    folders = os.listdir(startDir)
    folderPath = False

    for folder in folders:
        if folder == folderName:
            folderPath = startDir + '/' + folder
            break
        else:
            pass
    if not folderPath:
        folderPath = startDir + '/' + folderName
        os.makedirs(folderPath)
    os.chdir(folderPath)
    print(os.getcwd())

def help_options():
    print(""" 
                 ---------------------Note Creater-------------------
             [-] This is a tool to create notes in a default location
                 on your computer.
             [-] The tool allows you to create: 
             [-]    simple note as a markdown file
             [-]    a note with a different extension
             [-]    a note in a specified folder with an extension
             [-] -----------------------------------------------------
             [-] Usage instructions:
             [-]    notes_creator n filename
             [-]    notes_creator ne filename extension
             [-]    notes_creator nfe filename folder extension
             [-]    notes_creator -h
            """)


def main():
    if len(sys.argv) == 1:
        print("[-] No inputs supplied, for help see -h for documentation")
        return
    inputs = sys.argv[1:]
    if inputs[0] not in ['nfe', 'ne', 'n', '-h']:
        print('[-] Please use a valid input, for help see the documentation')
        return
    if inputs[0] == '-h':
        help_options()
        return
    elif inputs[0] == 'nfe':
        folderNotes(inputs[1], inputs[2], inputs[3])
        return
    elif inputs[0] == 'ne':
        simpleNote(inputs[1], inputs[2])
        return
    elif inputs[0] == 'n':
        simpleNote(inputs[1])
        return
    else:
        print('[-] Please enter a valid input, for help see the documentation')
        return


if __name__ == "__main__":
    import sys
    import os
    main()
